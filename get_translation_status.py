# #########################################################
#  Author: L-Titan, 01/Feb/2022
# 
#  A crude way of getting info about the Crowdin translation 
#  project via Crowdin API v2.
# 
#  -------------------------------------------------------
#
#  API v2:
#  https://support.crowdin.com/api/v2
#
#  Crowdin project:
#  https://crowdin.com/project/the-chronicles-of-myrtana
# 
#  -------------------------------------------------------
#  REQUIREMENTS
#
#  Python
#  https://www.python.org/downloads/ 
#
#  Crowdin Python client:
#  https://github.com/crowdin/crowdin-api-client-python
#
#  -------------------------------------------------------
#  HIGH-LEVEL DESCRIPTION OF THE ALGORITHM
# 
#  (the algorithm should take approximately 10-15 minutes
#   to finish)
#   
#  1. get list of project directories (1 GET request)
#    * each directory, except for root, has a 'pointer' to
#      its parent directory
#    * full path of directory is generated by traversing
#      the parent directories up to the root directory
#    * if parent directory isn't contained in API response,
#      the program terminates
#    * API response is parsed and project directories are 
#      stored in list with following structure of elements: 
#      [directory ID, full path, word count, % translated, % approved]]
# 
#  2. get list of project files (2 GET requests)
#    * the target project has roughly 900 files, but
#      Crowdin API allows only 500 responses per one call,
#      therefore the complete list of project files is 
#      generated in two requests
#    * the files are stored in list with following
#      structure of elements: 
#      [file ID, full path, word count, % translated, % approved]
#    * elements 'word count', '% translated' and '% approved'
#      are set to 'N/A' (they will be filled in next steps)
#       
#  3.  get translation status of directories (n GET requests,
#      where n = number of directories in list)
#    * word count and translation status is inserted to 
#      directories list
#    * ONLY translation for selected language is stored
# 
#  4.  get translations status of files (n GET requests,
#      where n = number of files in list)
#    * word count and translation status is inserted to files list,
#    * ONLY translation for selected language is stored
#
#  5. write all project files and directories to CSV file
# 
# #########################################################

import os
from crowdin_api import CrowdinClient

# ------------------------------------
# client settings
# ------------------------------------

class FirstCrowdinClient(CrowdinClient):
    TOKEN = <CROWDIN API TOKEN>
    # TIMEOUT = 60  # Optional, sets http request timeout.
    # RETRY_DELAY = 0.1  # Optional, sets the delay between failed requests 
    # MAX_RETRIES = 5  # Optional, sets the number of retries
    # HEADERS = {"Some-Header": ""}  # Optional, sets additional http request headers
    # PAGE_SIZE = 25  # Optional, sets default page size 

client = FirstCrowdinClient()

# query settings
projectId=489635
limit=500
rootDirName="Scripts"
language='cs'

# print basic info about requests
print(f"Project ID:  {projectId}")
print(f"Retrieval limit per one request:  {limit}")
print(f"Root folder of project source files:  \"{rootDirName}\"")
print(f"Selected language:  \"{language}\"")
print()

# ------------------------------------
# API requests
# ------------------------------------

# get list of project directories

print("REQUEST:  list of project directories")

directoriesDict = dict()
directories = []
rootDirectory = ''
dirId = ''
dirName = ''
response = client.source_files.list_directories(projectId=projectId, limit=limit)

for item in response['data']:    
    dirId = item['data']['id']
    dirName = item['data']['name']

    directoriesDict[dirId] = [dirName,item['data']['directoryId']]
    if (dirName == rootDirName):
        rootDirectory = dirId

# if root directory wasn't found, exit program
if (rootDirectory == ''):
    print(f'ERROR: No root folder named \"{rootDirName}\" found.')
    print('PROGRAM TERMINATED')
    exit()

# set full paths of directories
for key, value in directoriesDict.items():
    fullPath = '/' + value[0]
    parentDir = value[1]

    # go through parent directories, stop at root
    while (parentDir != None):
        fullPath = '/' + directoriesDict[parentDir][0] + fullPath
        parentDir = directoriesDict[parentDir][1]
    directories.append([key, fullPath,'N/A','N/A','N/A'])

# -----------------------------

# get list of project files

print("REQUEST:  list of project files")

files = []
response = client.source_files.list_files(projectId=projectId, limit=limit)

for item in response['data']:
    files.append([item['data']['id'], item['data']['path'],'N/A','N/A','N/A'])    

# the Chronicles of Myrtana project has cca 900 files
# => must get second response, because the max limit per one response is 500
response = client.source_files.list_files(projectId=projectId, limit=limit, offset=limit)
for item in response['data']:
    files.append([item['data']['id'], item['data']['path'],'N/A','N/A','N/A'])    

# ------------------------------------

# get translation status of directories

print("REQUEST:  translation status of project directories")

for directory in directories:
    # get translation progress of directory
    response = (client.translation_status.get_directory_progress(projectId=projectId, directoryId=directory[0], limit=limit))['data']

    # loop through language-specific data.
    # to each directory add only data regarding its Czech translation progress
    for item in response:
        if (item['data']['languageId'] == language):
            directory[2] = (item['data']['words'])['total']            
            directory[3] = item['data']['translationProgress']
            directory[4] = item['data']['approvalProgress']            

# ------------------------------------

# get translation status of files

print("REQUEST:  translation status of project files")

for file in files:
    # get translation progress of file
    response = (client.translation_status.get_file_progress(projectId=projectId, fileId=file[0], limit=limit))['data']

    # loop through language-specific data.
    # to each file add only data regarding its Czech translation progress
    for item in response:
        if (item['data']['languageId'] == language):
            file[2] = (item['data']['words'])['total']            
            file[3] = item['data']['translationProgress']
            file[4] = item['data']['approvalProgress']            

# ------------------------------------
# create CSV file
# ------------------------------------

print("Generating output...")

filename = os.path.basename(__file__)
csvFile = open(filename + '.csv', 'w')

csvFile.write("Type,ID,Item,Words_total,Translation_percent,Approved_percent\n")

for file in files:
    csvFile.write("file,{0},{1},{2},{3},{4}\n".format(file[0],file[1],file[2],file[3],file[4]))

for directory in directories:
    csvFile.write("directory,{0},{1},{2},{3},{4}\n".format(directory[0],directory[1],directory[2],directory[3],directory[4]))

csvFile.close()

print(f"{filename} generated.")
print("Program finished.")